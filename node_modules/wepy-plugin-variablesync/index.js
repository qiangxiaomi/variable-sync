'use strict';
const fs = require('fs')
const readFile = require('util').promisify(fs.readFile)

exports.__esModule = true;

var _class = function () {
  function _class() {
    var c = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var def = {
      filter: new RegExp('\.(wxss)$'),
      config: {
        browsers: ['Android >= 2.3', 'Chrome > 20', 'iOS >= 6']
      }
    };

    this.setting = Object.assign({}, def, c);
  }

  /**
   * 读取当前*.wxss文件相对应的.js文件内容
   * @param filePath
   * @returns {Promise<*>}
   */
  async function run(filePath){
    try{
      //readFile的时候需要指定encoding为utf8，否则返回的就是一串串的数字（buffer）
      const fr = await readFile(filePath, 'utf8')
      return fr
    }catch(err){
      console.log(err)
    }
  }
  /**
   * 查找当前文件的js文件中的相应定义的data值，key在css中定义，value在data中定义
   */
  function _getCurrentJSVariable(content){
    let filterDataReg = new RegExp(/o\.data=\{.+?\},/g,"g")
    let matchResult = content.match(filterDataReg)
    let matchResult1 = matchResult[0].match(new RegExp(/\{.*\}/,"g"))
    //将String转换为Object,不建议用eval()
    // let obj = eval("(" + matchResult1[0] + ")")
    let obj = (new Function("return " + matchResult1[0]))();
    return obj
  }

  // function findCurrent

  _class.prototype.apply = async function apply(op) {
    //op.code为编译后的css文件，遍历css文件判断有无-@标志
    let filterReg = new RegExp(/[a-z\-]+:"-@[^;}]+;?/,"g")
    if(op.code && op.code.length > 0){
      let result = op.code.replace(filterReg,'')
      let matchResult = op.code.match(filterReg)
      if(matchResult && matchResult.length > 0){
        let filterClassReg = new RegExp(/\w+(?=")/,"g")
        let currentFilePath = op.file.replace(new RegExp(/\.wxss/,"g"),'.js')
        let result =  _getCurrentJSVariable(await run(currentFilePath))
        //处理好的css数组
        let tempArray = matchResult.map(v => {
          //res数组中包含了less中定义-@variable所有变量
          let res = v.match(filterClassReg)
          if (!res[0]) return
          v = v.replace(new RegExp(/\-@\w+/,"g"),result[res[0]])
          return v
        })
        console.log('=====================rtrtrtrt', tempArray)
      }

    }
    var setting = this.setting;


    if (!setting.filter.test(op.file)) {
      op.next();
    } else {
      op.output && op.output({
        action: '变更',
        file: op.file
      });
    }
  };
  return _class;
}();

exports.default = _class;